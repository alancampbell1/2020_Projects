NodeJS Modules:

What is a Node.js module:
Consider modules to be the same as JavaScript libraries. They are a set of functions you want included in your application.

NodeJS has a set of built-in modules which you can use without any further installation. 

Include Modules:
To include a module, you use the require() function with the name of the module you are looking for. Example:

var http = require('http');

Now, your application has access to the HTTP module and can create the server:

http.createServer(function (req, res) {
	res.writeHead(200, {'Content-Type': 'text/html'});
	res.end('Hello World');
}).listen(8080);

Creating your own module:
Creating your own modules is easy and straightforward. You can then include them in your applications. In the following example, we have a sample module that returns a date and time object:

exports.myDateTime = function() {
	return Date();
};


This is saved to a standalone file called 'myfirstmodule.js'. The keyword 'exports' makes properties and methods in this file available outside the module file.


You can now include the module in your main nodejs file. In the following example, we read in the object into a variable called 'dt'. We then call the object's internal function for printing the time and date in the output .write() statement to port 8080.


var http = require('http');
var dt = require('./myfirstmodule');

http.createServer(function (req, res){
	res.writeHead(200, {'Content-Type': 'text/html'});
	res.write("The date and time are currently: " + dt.myDateTime());
	res.end();
}).listen(8080); 

This is saved to a file called 'demo_module.js'.








